{"version":3,"sources":["components/contentLoader.jsx","pages/home.jsx","pages/allPosts.jsx","components/postSection.jsx","pages/searchResults.jsx","App.js","components/header.jsx","components/sidebar.jsx","MobileApp.js","components/navbar.jsx","components/CodeBlock.js","components/markdownSection.jsx","components/listWithPagination.jsx","components/scrollToTop.jsx","WebApp.js","serviceWorker.js","index.js"],"names":["ContentLoader","path","this","blogDataPath","content","fetch","then","response","text","posts","partitions","forEach","post","date","year","parseInt","substring","undefined","month","partitionYear","push","split","tag","Home","props","state","shuffled","map","x","sort","Math","random","Fragment","filePath","style","background","minHeight","as","active","Group","itemsPerRow","slice","title","slug","Buffer","toString","key","color","Content","Header","Meta","Description","lines","width","ellipsis","dangerouslySetInnerHTML","__html","extra","textAlign","basic","onClick","window","location","href","Component","AllPosts","itemsPerPage","PostSection","parseDate","parsedDate","comments","console","log","icon","history","go","marginTop","dividing","comment","padding","Author","Metadata","Text","SearchResultsPage","getPostsWithSearchValue","searchValue","results","includes","searchResults","decodedValue","match","params","value","length","withRouter","parseString","require","App","allPosts","postsPartitionedByDate","postsPartitionedByTags","loader","Promise","resolve","reject","loadBlog","err","blog","setState","partitionPostsByDate","partitionPostsByTags","error","className","alt","src","Row","columns","margin","Column","exact","component","Object","keys","tagsToEnglish","children","SiteHeader","handleItemClick","e","name","activeItem","itemName","pathname","substr","paddingBottom","size","circular","paddingTop","pointing","secondary","Item","Link","to","SideBar","handleYearMenuClick","titleProps","index","newIndex","activeYear","handleSearchClick","encodedValue","marginLeft","action","placeholder","onChange","target","Menu","vertical","border","boxShadow","postCount","monthMenu","monthLabel","Title","MobileApp","NavBar","id","borderRadius","position","zIndex","fontSize","item","scrolling","paddingLeft","height","CodeBlock","SyntaxHighlighter","registerLanguage","jsx","javascript","typescript","css","language","coy","PureComponent","defaultProps","flatten","child","React","Children","toArray","reduce","HeadingRenderer","createElement","level","MarkdownSection","lang","markdownText","loadMarkdown","Container","escapeHtml","source","renderers","code","heading","ListWithPagination","handlePageChange","event","data","currentPage","activePage","pages","i","ceil","dividePages","divided","maxDeviceWidth","ellipsisItem","boundaryRange","siblingRange","defaultActivePage","totalPages","onPageChange","minDeviceWidth","ScrollToTop","prevProps","scrollTo","WebApp","basename","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.f2f4f18f.chunk.js","sourcesContent":["/********************* XML Format *********************/\r\n/*\r\n<blogbuscom dtype=\"BlogData\" SchemaVersion=\"1.1\" Creator=\"BlogBus.Com BlogSystem V4.0\">\r\n// 导出文件的数据类型，版本和出处\r\n    <description> // 博客描述\r\n        <blogname>博客名称，例如：孙楠的技术讲堂</blogname>\r\n        <domainname>博客地址，例如：sunnantechnology.blogbus.com</domainname>\r\n        <exporttime>导出的时间，格式为：2008-12-20 15:43:26</exporttime>\r\n    </description> // 描述结束\r\n    <log> // 博客日志\r\n        <title>日志标题，例如：Blogbus导出日志的XML文件格式分析</title>\r\n        <status>日志状态，控制隐藏和置顶，隐藏为0，正常为1，置顶为2</status>\r\n        <allowcomment>评论，Y为允许，N为不允许</allowcomment>\r\n        <allowping>引用，Y为允许，N为不允许</allowping>\r\n        <allowlinks>自动链接，Y为允许，N为不允许</allowlinks>\r\n        <writer>作者姓名，可以为空</writer>\r\n        <sort>分类，为什么用Sort，Catalog不是更好?</sort>\r\n        <content>日志内容，包括html格式</content>\r\n        <excerpt>日志摘要，包括html格式</excerpt>\r\n        <tags>关键词，关键词之间用空格分隔</tags>\r\n        <logdate>日志时间，格式为：2008-04-17 13:40:00</logdate>\r\n        <comments> // 这个标记做什么用？可以省略吗？\r\n            <comment> // 博客评论\r\n                <email>评论者的邮件地址</email>\r\n                <homepage>评论者的主页地址</homepage>\r\n                <createtime>评论时间，格式为：2008-12-19 21:45:48</createtime>\r\n                <nicename>评论者的姓名</nicename>\r\n                <commenttext>评论的内容和回复，无html格式</commenttext>\r\n            </comment> // 评论结束\r\n            <comment>...</comment> // 更多评论\r\n        </comments> // 这个标记做什么用？可以省略吗？\r\n    </log> // 日志结束\r\n    <log>...</log> // 更多日志\r\n</blogbuscom> // 导出文件结束\r\n\r\n*/\r\n/*******************************************/\r\n\r\nclass ContentLoader {\r\n  constructor(path) {\r\n    this.blogDataPath = path;\r\n  }\r\n\r\n  async loadBlog() {\r\n    let content = \"\";\r\n    await fetch(this.blogDataPath)\r\n      .then((response) => response.text())\r\n      .then((text) => (content = text));\r\n    return content;\r\n  }\r\n\r\n  /**\r\n   * Partition the blog posts by year\r\n   * @param posts: suppose posts is already in json form\r\n   */\r\n  partitionPostsByDate(posts) {\r\n    const partitions = {};\r\n    posts.forEach((post) => {\r\n      const date = post[\"LogDate\"][0];\r\n      const year = parseInt(date.substring(0, 4));\r\n      if (partitions[year] === undefined) {\r\n        partitions[year] = {};\r\n      }\r\n      const month = parseInt(date.substring(5, 7));\r\n      const partitionYear = partitions[year];\r\n      if (partitionYear[month] === undefined) {\r\n        partitionYear[month] = [post];\r\n      } else {\r\n        partitionYear[month].push(post);\r\n      }\r\n    });\r\n    return partitions;\r\n  }\r\n\r\n  partitionPostsByTags(posts) {\r\n    const partitions = {};\r\n    posts.forEach((post) => {\r\n      const tags = post[\"Tags\"][0].split(\" \");\r\n      tags.forEach((tag) => {\r\n        tag = tag === \"\" ? \"无标签\" : tag;\r\n        if (partitions[tag] === undefined) {\r\n          partitions[tag] = [post];\r\n        } else {\r\n          partitions[tag].push(post);\r\n        }\r\n      });\r\n    });\r\n    return partitions;\r\n  }\r\n}\r\n\r\nexport default ContentLoader;\r\n","import React, { Component } from \"react\";\r\nimport MarkdownSection from \"../components/markdownSection\";\r\nimport { Loader, Header, Card, Segment, Button } from \"semantic-ui-react\";\r\nimport Truncate from \"react-truncate\";\r\n\r\nconst NumOfPostsToDisplay = 10;\r\n\r\nclass Home extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      posts: props.posts,\r\n    };\r\n  }\r\n  render() {\r\n    const { posts } = this.state;\r\n    let shuffled = null;\r\n    if (posts) {\r\n      shuffled = posts.map((x) => ({ ...x }));\r\n      shuffled = shuffled.sort(() => 0.5 - Math.random());\r\n    }\r\n    return (\r\n      <React.Fragment>\r\n        <MarkdownSection filePath={process.env.PUBLIC_URL + \"/home-intro.md\"} />\r\n        <Segment style={{ background: \"none\", minHeight: \"200px\" }}>\r\n          <Header as=\"h3\">博文节选</Header>\r\n          {(!shuffled && <Loader active>Loading</Loader>) ||\r\n            (shuffled && (\r\n              <Card.Group itemsPerRow={1}>\r\n                {shuffled.slice(0, NumOfPostsToDisplay).map((post) => {\r\n                  const title = post[\"Title\"][0];\r\n                  const slug = new Buffer(title + post[\"LogDate\"][0]).toString(\r\n                    \"hex\"\r\n                  );\r\n                  return (\r\n                    <Card\r\n                      key={post[\"Title\"][0]}\r\n                      style={{ background: \"none\" }}\r\n                      color=\"blue\"\r\n                    >\r\n                      <Card.Content>\r\n                        <Card.Header>{post[\"Title\"][0]}</Card.Header>\r\n                        <Card.Meta>{post[\"LogDate\"][0]}</Card.Meta>\r\n                        <Card.Description>\r\n                          <Truncate lines={3} width={1000} ellipsis=\"&hellip;\">\r\n                            <div\r\n                              dangerouslySetInnerHTML={{\r\n                                __html: post[\"Content\"][0],\r\n                              }}\r\n                            ></div>\r\n                          </Truncate>\r\n                        </Card.Description>\r\n                      </Card.Content>\r\n                      <Card.Content extra textAlign=\"right\">\r\n                        <Button\r\n                          basic\r\n                          color=\"blue\"\r\n                          onClick={() => (window.location.href = `/${slug}`)}\r\n                        >\r\n                          阅读\r\n                        </Button>\r\n                      </Card.Content>\r\n                    </Card>\r\n                  );\r\n                })}\r\n              </Card.Group>\r\n            ))}\r\n        </Segment>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React, { Component } from \"react\";\r\nimport ListWithPagination from \"../components/listWithPagination\";\r\n\r\nclass AllPosts extends Component {\r\n  state = {};\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      posts: props.posts,\r\n    };\r\n  }\r\n  render() {\r\n    const { posts } = this.state;\r\n    return (\r\n      <React.Fragment>\r\n        <ListWithPagination\r\n          key={posts === null}\r\n          title=\"博文目录\"\r\n          posts={posts}\r\n          itemsPerPage={25}\r\n        />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AllPosts;\r\n","import React, { Component } from \"react\";\r\nimport { Button, Container, Header, Comment, Segment } from \"semantic-ui-react\";\r\n\r\nclass PostSection extends Component {\r\n  state = {};\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      post: props.post,\r\n    };\r\n  }\r\n\r\n  parseDate = (date) => {\r\n    let parsedDate = date.substring(0, 4) + \"年\";\r\n    parsedDate += date.substring(5, 7) + \"月\";\r\n    parsedDate += date.substring(8, 10) + \"日 \";\r\n    parsedDate += date.substring(10);\r\n    return parsedDate;\r\n  };\r\n\r\n  render() {\r\n    const { post } = this.state;\r\n    const comments = post[\"Comments\"][0][\"Comment\"];\r\n    console.log(post);\r\n    return (\r\n      <React.Fragment>\r\n        <Button\r\n          basic\r\n          color=\"blue\"\r\n          icon=\"angle double left\"\r\n          onClick={() => window.history.go(-1)}\r\n        />\r\n        <Header as=\"h2\" style={{ textAlign: \"center\", marginTop: \"0.5em\" }}>\r\n          {post[\"Title\"][0]}\r\n        </Header>\r\n        <Header\r\n          as=\"h5\"\r\n          style={{ color: \"gray\", textAlign: \"center\", marginTop: \"1em\" }}\r\n        >\r\n          {this.parseDate(post[\"LogDate\"][0])}\r\n        </Header>\r\n        <Container\r\n          dangerouslySetInnerHTML={{ __html: post[\"Content\"][0] }}\r\n        ></Container>\r\n        {comments && (\r\n          <Segment style={{ marginTop: \"2em\", background: \"none\" }}>\r\n            <Comment.Group>\r\n              <Header as=\"h3\" dividing>\r\n                评论\r\n              </Header>\r\n              {comments.map((comment) => {\r\n                return (\r\n                  <Comment\r\n                    key={comment[\"NiceName\"][0] + comment[\"CreateTime\"][0]}\r\n                    style={{ padding: \"0.5em\" }}\r\n                  >\r\n                    <Comment.Content>\r\n                      <Comment.Author>{comment[\"NiceName\"][0]}</Comment.Author>\r\n                      <Comment.Metadata>\r\n                        {comment[\"CreateTime\"][0]}\r\n                      </Comment.Metadata>\r\n                      <Comment.Text\r\n                        dangerouslySetInnerHTML={{\r\n                          __html: comment[\"CommentText\"][0],\r\n                        }}\r\n                      ></Comment.Text>\r\n                    </Comment.Content>\r\n                  </Comment>\r\n                );\r\n              })}\r\n            </Comment.Group>\r\n          </Segment>\r\n        )}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PostSection;\r\n","import React, { Component } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport ListWithPagination from \"../components/listWithPagination\";\r\nimport { Loader } from \"semantic-ui-react\";\r\n\r\nclass SearchResultsPage extends Component {\r\n  state = {};\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      posts: props.posts,\r\n    };\r\n  }\r\n\r\n  getPostsWithSearchValue = (searchValue) => {\r\n    let results = [];\r\n    const { posts } = this.state;\r\n    posts.forEach((post) => {\r\n      const title = post[\"Title\"][0];\r\n      const content = post[\"Content\"][0];\r\n      if (title.includes(searchValue) || content.includes(searchValue)) {\r\n        results.push(post);\r\n      }\r\n    });\r\n    return results;\r\n  };\r\n\r\n  render() {\r\n    const { posts } = this.state;\r\n    let searchResults = null;\r\n    let decodedValue = \"\";\r\n    if (posts) {\r\n      const searchValue = this.props.match.params.value;\r\n      decodedValue = new Buffer(searchValue, \"hex\").toString();\r\n      searchResults = this.getPostsWithSearchValue(decodedValue);\r\n    }\r\n    return (\r\n      <React.Fragment>\r\n        {(!searchResults && <Loader active>Loading</Loader>) ||\r\n          (searchResults && (\r\n            <ListWithPagination\r\n              title={`搜索结果: ${decodedValue} (${searchResults.length})`}\r\n              posts={searchResults}\r\n              itemsPerPage={25}\r\n            />\r\n          ))}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(SearchResultsPage);\r\n","import React, { Component } from \"react\";\nimport ContentLoader from \"./components/contentLoader\";\nimport \"./App.css\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport { Grid, Segment } from \"semantic-ui-react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport SiteHeader from \"./components/header\";\nimport SideBar from \"./components/sidebar\";\nimport Home from \"./pages/home\";\nimport AllPosts from \"./pages/allPosts\";\nimport ListWithPagination from \"./components/listWithPagination\";\nimport tagsToEnglish from \"./data/tagsInEnglish.json\";\nimport PostSection from \"./components/postSection\";\nimport SearchResultsPage from \"./pages/searchResults\";\n\nconst parseString = require(\"xml2js\").parseString;\n\nconst itemsPerPage = 25;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      allPosts: null,\n      postsPartitionedByDate: null,\n      postsPartitionedByTags: null,\n    };\n  }\n\n  componentDidMount() {\n    const loader = new ContentLoader(process.env.PUBLIC_URL + \"/howe-blog.xml\");\n    const promise = new Promise(function (resolve, reject) {\n      const content = loader.loadBlog();\n      resolve(content);\n    });\n    promise.then(\n      (content) => {\n        parseString(content, (err, blog) => {\n          blog = blog[\"BlogBusCom\"];\n          this.setState({\n            allPosts: blog[\"Log\"],\n          });\n          this.setState({\n            postsPartitionedByDate: loader.partitionPostsByDate(blog[\"Log\"]),\n          });\n          this.setState({\n            postsPartitionedByTags: loader.partitionPostsByTags(blog[\"Log\"]),\n          });\n        });\n      },\n      (error) => console.log(error)\n    );\n  }\n\n  render() {\n    const { postsPartitionedByDate } = this.state;\n    const { postsPartitionedByTags } = this.state;\n    const { allPosts } = this.state;\n    if (allPosts) {\n      console.log(allPosts.length);\n    }\n    return (\n      <React.Fragment>\n        <div className=\"image-container\">\n          <img\n            className=\"center-fit\"\n            alt=\"background\"\n            src={process.env.PUBLIC_URL + \"/images/background.jpg\"}\n          />\n        </div>\n        <Grid>\n          <SiteHeader />\n          <Grid.Row columns={2} style={{ margin: \"0 10em\" }}>\n            <SideBar\n              key={\n                (postsPartitionedByDate === null) +\n                (postsPartitionedByTags === null)\n              }\n              postsPartitionedByDate={postsPartitionedByDate}\n              postsPartitionedByTags={postsPartitionedByTags}\n            />\n            <Grid.Column style={{ padding: \"0 0 0 1em\" }} width={12}>\n              <Segment\n                className=\"semi-transparent\"\n                style={{\n                  padding: \"2em\",\n                  minHeight: \"200px\",\n                }}\n              >\n                <Switch>\n                  <Route\n                    path=\"/\"\n                    exact\n                    component={() => (\n                      <Home key={allPosts === null} posts={allPosts} />\n                    )}\n                  />\n                  <Route\n                    path=\"/all-posts\"\n                    exact\n                    component={() => (\n                      <AllPosts key={allPosts === null} posts={allPosts} />\n                    )}\n                  />\n                  {postsPartitionedByDate &&\n                    Object.keys(postsPartitionedByDate).map((year) => {\n                      const yearLinks = Object.keys(\n                        postsPartitionedByDate[year]\n                      ).map((month) => {\n                        return (\n                          <Route\n                            key={`${year}${month}`}\n                            path={`/posts-${year}-${month}`}\n                            exact\n                            component={() => (\n                              <ListWithPagination\n                                title={`${year}年${month}月`}\n                                posts={postsPartitionedByDate[year][month]}\n                                itemsPerPage={itemsPerPage}\n                              />\n                            )}\n                          />\n                        );\n                      });\n                      return yearLinks;\n                    })}\n                  {postsPartitionedByTags &&\n                    Object.keys(postsPartitionedByTags).map((tag) => {\n                      return (\n                        <Route\n                          key={tag}\n                          path={`/posts-${tagsToEnglish[tag]}`}\n                          exact\n                          component={() => (\n                            <ListWithPagination\n                              title={`标签：${tag}`}\n                              posts={postsPartitionedByTags[tag]}\n                              itemsPerPage={itemsPerPage}\n                            />\n                          )}\n                        />\n                      );\n                    })}\n\n                  {allPosts &&\n                    allPosts.map((post) => {\n                      const title = post[\"Title\"][0];\n                      const slug = new Buffer(\n                        title + post[\"LogDate\"][0]\n                      ).toString(\"hex\");\n                      return (\n                        <Route\n                          key={slug}\n                          path={`/${slug}`}\n                          exact\n                          component={() => <PostSection post={post} />}\n                        />\n                      );\n                    })}\n                  <Route\n                    path=\"/search/:value\"\n                    children={() => (\n                      <SearchResultsPage\n                        key={allPosts === null}\n                        posts={allPosts}\n                      />\n                    )}\n                  />\n                </Switch>\n              </Segment>\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Menu, Header, Grid, Segment, Image } from \"semantic-ui-react\";\r\n\r\nclass SiteHeader extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    let itemName = window.location.pathname.substr(1);\r\n    if (itemName === \"\") {\r\n      itemName = \"首页\";\r\n    } else {\r\n      itemName = itemName === \"all-posts\" ? \"博文目录\" : itemName;\r\n    }\r\n    this.state = {\r\n      activeItem: itemName,\r\n    };\r\n  }\r\n\r\n  handleItemClick = (e, { name }) => this.setState({ activeItem: name });\r\n\r\n  render() {\r\n    const { activeItem } = this.state;\r\n    const leftPadding = \"2em\";\r\n    return (\r\n      <Grid.Row columns={1} style={{ paddingBottom: 0 }}>\r\n        <Segment\r\n          className=\"semi-transparent\"\r\n          style={{\r\n            margin: `2em 10em`,\r\n            width: \"100%\",\r\n          }}\r\n        >\r\n          <Grid>\r\n            <Grid.Row columns={2} style={{ padding: `2em ${leftPadding}` }}>\r\n              <Grid.Column width={1} textAlign=\"left\">\r\n                <Image\r\n                  src={process.env.PUBLIC_URL + \"/images/profile-pic.jpg\"}\r\n                  size=\"tiny\"\r\n                  circular\r\n                  style={{ margin: 0 }}\r\n                />\r\n              </Grid.Column>\r\n              <Grid.Column width={15} textAlign=\"left\">\r\n                <Header as=\"h1\" style={{ paddingTop: \"0.3em\" }}>\r\n                  心的方向\r\n                </Header>\r\n              </Grid.Column>\r\n            </Grid.Row>\r\n            <Grid.Row columns={1} style={{ padding: `2em ${leftPadding}` }}>\r\n              <Menu pointing secondary>\r\n                <Menu.Item\r\n                  as={Link}\r\n                  to=\"/\"\r\n                  name=\"首页\"\r\n                  active={activeItem === \"首页\"}\r\n                  onClick={this.handleItemClick}\r\n                />\r\n                <Menu.Item\r\n                  as={Link}\r\n                  to=\"/all-posts\"\r\n                  name=\"博文目录\"\r\n                  active={activeItem === \"博文目录\"}\r\n                  onClick={this.handleItemClick}\r\n                />\r\n              </Menu>\r\n            </Grid.Row>\r\n          </Grid>\r\n        </Segment>\r\n      </Grid.Row>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SiteHeader;\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  Segment,\r\n  Grid,\r\n  Accordion,\r\n  List,\r\n  Header,\r\n  Menu,\r\n  Loader,\r\n  Input,\r\n} from \"semantic-ui-react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport tagsToEnglish from \"../data/tagsInEnglish.json\";\r\n\r\nclass SideBar extends Component {\r\n  state = {};\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      postsPartitionedByDate: props.postsPartitionedByDate,\r\n      postsPartitionedByTags: props.postsPartitionedByTags,\r\n      activeYear: 0,\r\n      searchValue: \"\",\r\n    };\r\n  }\r\n\r\n  handleYearMenuClick = (e, titleProps) => {\r\n    const { index } = titleProps;\r\n    const { activeYear } = this.state;\r\n    const newIndex = activeYear === index ? -1 : index;\r\n    this.setState({ activeYear: newIndex });\r\n  };\r\n\r\n  handleSearchClick = () => {\r\n    const encodedValue = new Buffer(this.state.searchValue).toString(\"hex\");\r\n    window.location.href = `/search/${encodedValue}`;\r\n  };\r\n\r\n  render() {\r\n    const { postsPartitionedByDate } = this.state;\r\n    const { postsPartitionedByTags } = this.state;\r\n    const { activeYear } = this.state;\r\n    return (\r\n      <Grid.Column style={{ padding: \"0 1em 0 0\" }} width={4}>\r\n        <Grid style={{ marginLeft: 0 }}>\r\n          {/* Search */}\r\n          <Grid.Row columns={1}>\r\n            <Segment\r\n              className=\"semi-transparent\"\r\n              style={{ width: \"100%\", minHeight: \"100px\" }}\r\n            >\r\n              <Header as=\"h3\">关键词搜索</Header>\r\n              <Input\r\n                action={{\r\n                  icon: \"search\",\r\n                  onClick: () => this.handleSearchClick(),\r\n                }}\r\n                placeholder=\"请输入关键词...\"\r\n                onChange={(e) => this.setState({ searchValue: e.target.value })}\r\n                style={{ width: \"100%\" }}\r\n              />\r\n            </Segment>\r\n          </Grid.Row>\r\n          {/* Partitioned by date */}\r\n          <Grid.Row columns={1}>\r\n            <Segment\r\n              className=\"semi-transparent\"\r\n              style={{ width: \"100%\", minHeight: \"200px\" }}\r\n            >\r\n              <Header as=\"h3\">归档</Header>\r\n              <Accordion\r\n                as={Menu}\r\n                vertical\r\n                style={{\r\n                  background: \"none\",\r\n                  width: \"100%\",\r\n                  border: \"none\",\r\n                  boxShadow: \"none\",\r\n                }}\r\n              >\r\n                {(!postsPartitionedByDate && <Loader active>Loading</Loader>) ||\r\n                  (postsPartitionedByDate &&\r\n                    Object.keys(postsPartitionedByDate).map((year) => {\r\n                      let postCount = 0;\r\n                      const monthMenu = (\r\n                        <List style={{ marginLeft: \"2em\" }}>\r\n                          {Object.keys(postsPartitionedByDate[year]).map(\r\n                            (month) => {\r\n                              const monthLabel =\r\n                                month < 10 ? \"0\" + month : month;\r\n                              postCount +=\r\n                                postsPartitionedByDate[year][month].length;\r\n                              return (\r\n                                <List.Item\r\n                                  as={Link}\r\n                                  to={`/posts-${year}-${month}`}\r\n                                  key={month}\r\n                                  style={{ padding: \"0.5em 0\" }}\r\n                                >\r\n                                  {`${monthLabel}月 (${postsPartitionedByDate[year][month].length})`}\r\n                                </List.Item>\r\n                              );\r\n                            }\r\n                          )}\r\n                        </List>\r\n                      );\r\n\r\n                      return (\r\n                        <React.Fragment key={year}>\r\n                          <Accordion.Title\r\n                            active={activeYear === year}\r\n                            content={`${year}年 (${postCount})`}\r\n                            index={year}\r\n                            onClick={this.handleYearMenuClick}\r\n                          />\r\n                          <Accordion.Content\r\n                            active={activeYear === year}\r\n                            content={monthMenu}\r\n                            style={{ padding: 0 }}\r\n                          />\r\n                        </React.Fragment>\r\n                      );\r\n                    }))}\r\n              </Accordion>\r\n            </Segment>\r\n          </Grid.Row>\r\n\r\n          {/* Partitioned by Tags */}\r\n          <Grid.Row columns={1}>\r\n            <Segment\r\n              className=\"semi-transparent\"\r\n              style={{ width: \"100%\", minHeight: \"200px\" }}\r\n            >\r\n              <Header as=\"h3\">文章标签</Header>\r\n\r\n              {(!postsPartitionedByTags && <Loader active>Loading</Loader>) ||\r\n                (postsPartitionedByTags && (\r\n                  <List style={{ background: \"none\", width: \"100%\" }}>\r\n                    {Object.keys(postsPartitionedByTags).map((tag) => {\r\n                      return (\r\n                        <List.Item\r\n                          as={Link}\r\n                          to={`/posts-${tagsToEnglish[tag]}`}\r\n                          key={tag}\r\n                          style={{ padding: \"0.5em 0\" }}\r\n                        >\r\n                          {`${tag} (${postsPartitionedByTags[tag].length})`}\r\n                        </List.Item>\r\n                      );\r\n                    })}\r\n                  </List>\r\n                ))}\r\n            </Segment>\r\n          </Grid.Row>\r\n        </Grid>\r\n      </Grid.Column>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SideBar;\r\n","import React, { Component } from \"react\";\r\nimport ContentLoader from \"./components/contentLoader\";\r\nimport NavBar from \"./components/navbar\";\r\nimport { Container } from \"semantic-ui-react\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport Home from \"./pages/home\";\r\nimport AllPosts from \"./pages/allPosts\";\r\nimport ListWithPagination from \"./components/listWithPagination\";\r\nimport tagsToEnglish from \"./data/tagsInEnglish.json\";\r\nimport PostSection from \"./components/postSection\";\r\nimport SearchResultsPage from \"./pages/searchResults\";\r\nconst parseString = require(\"xml2js\").parseString;\r\nconst itemsPerPage = 25;\r\n\r\nclass MobileApp extends Component {\r\n  state = {};\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      allPosts: null,\r\n      postsPartitionedByDate: null,\r\n      postsPartitionedByTags: null,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const loader = new ContentLoader(process.env.PUBLIC_URL + \"/howe-blog.xml\");\r\n    const promise = new Promise(function (resolve, reject) {\r\n      const content = loader.loadBlog();\r\n      resolve(content);\r\n    });\r\n    promise.then(\r\n      (content) => {\r\n        parseString(content, (err, blog) => {\r\n          blog = blog[\"BlogBusCom\"];\r\n          this.setState({\r\n            allPosts: blog[\"Log\"],\r\n          });\r\n          this.setState({\r\n            postsPartitionedByDate: loader.partitionPostsByDate(blog[\"Log\"]),\r\n          });\r\n          this.setState({\r\n            postsPartitionedByTags: loader.partitionPostsByTags(blog[\"Log\"]),\r\n          });\r\n        });\r\n      },\r\n      (error) => console.log(error)\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { postsPartitionedByDate } = this.state;\r\n    const { postsPartitionedByTags } = this.state;\r\n    const { allPosts } = this.state;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <NavBar\r\n          key={postsPartitionedByTags === null}\r\n          postsPartitionedByDate={postsPartitionedByDate}\r\n          postsPartitionedByTags={postsPartitionedByTags}\r\n        />\r\n        <Container\r\n          style={{\r\n            paddingTop: \"7em\",\r\n            paddingBottom: \"2em\",\r\n          }}\r\n        >\r\n          <Switch>\r\n            <Route\r\n              path=\"/\"\r\n              exact\r\n              component={() => (\r\n                <Home key={allPosts === null} posts={allPosts} />\r\n              )}\r\n            />\r\n            <Route\r\n              path=\"/all-posts\"\r\n              exact\r\n              component={() => (\r\n                <AllPosts key={allPosts === null} posts={allPosts} />\r\n              )}\r\n            />\r\n            {postsPartitionedByDate &&\r\n              Object.keys(postsPartitionedByDate).map((year) => {\r\n                const yearLinks = Object.keys(postsPartitionedByDate[year]).map(\r\n                  (month) => {\r\n                    return (\r\n                      <Route\r\n                        key={`${year}${month}`}\r\n                        path={`/posts-${year}-${month}`}\r\n                        exact\r\n                        component={() => (\r\n                          <ListWithPagination\r\n                            title={`${year}年${month}月 (${postsPartitionedByDate[year][month].length})`}\r\n                            posts={postsPartitionedByDate[year][month]}\r\n                            itemsPerPage={itemsPerPage}\r\n                          />\r\n                        )}\r\n                      />\r\n                    );\r\n                  }\r\n                );\r\n                return yearLinks;\r\n              })}\r\n            {postsPartitionedByTags &&\r\n              Object.keys(postsPartitionedByTags).map((tag) => {\r\n                return (\r\n                  <Route\r\n                    key={tag}\r\n                    path={`/posts-${tagsToEnglish[tag]}`}\r\n                    exact\r\n                    component={() => (\r\n                      <ListWithPagination\r\n                        title={`标签：${tag}`}\r\n                        posts={postsPartitionedByTags[tag]}\r\n                        itemsPerPage={itemsPerPage}\r\n                      />\r\n                    )}\r\n                  />\r\n                );\r\n              })}\r\n\r\n            {allPosts &&\r\n              allPosts.map((post) => {\r\n                const title = post[\"Title\"][0];\r\n                const slug = new Buffer(title + post[\"LogDate\"][0]).toString(\r\n                  \"hex\"\r\n                );\r\n                return (\r\n                  <Route\r\n                    key={slug}\r\n                    path={`/${slug}`}\r\n                    exact\r\n                    component={() => <PostSection post={post} />}\r\n                  />\r\n                );\r\n              })}\r\n            <Route\r\n              path=\"/search/:value\"\r\n              children={() => (\r\n                <SearchResultsPage key={allPosts === null} posts={allPosts} />\r\n              )}\r\n            />\r\n          </Switch>\r\n        </Container>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MobileApp;\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  Loader,\r\n  Image,\r\n  Menu,\r\n  Segment,\r\n  Dropdown,\r\n  Input,\r\n  Icon,\r\n  Button,\r\n} from \"semantic-ui-react\";\r\nimport tagsToEnglish from \"../data/tagsInEnglish.json\";\r\n\r\nclass NavBar extends Component {\r\n  state = {};\r\n  constructor(props) {\r\n    super(props);\r\n    let itemName = window.location.pathname.substr(1);\r\n    if (itemName === \"\") {\r\n      itemName = \"首页\";\r\n    } else {\r\n      itemName = itemName === \"all-posts\" ? \"博文目录\" : itemName;\r\n    }\r\n    this.state = {\r\n      activeItem: itemName,\r\n      postsPartitionedByTags: props.postsPartitionedByTags,\r\n      postsPartitionedByDate: props.postsPartitionedByDate,\r\n    };\r\n  }\r\n\r\n  handleItemClick = (e, { name }) => this.setState({ activeItem: name });\r\n  handleSearchClick = () => {\r\n    const encodedValue = new Buffer(this.state.searchValue).toString(\"hex\");\r\n    window.location.href = `/search/${encodedValue}`;\r\n  };\r\n  render() {\r\n    const { activeItem } = this.state;\r\n    const { postsPartitionedByTags } = this.state;\r\n    const { postsPartitionedByDate } = this.state;\r\n    return (\r\n      <Segment\r\n        id=\"navbar\"\r\n        style={{\r\n          padding: \"0.5em\",\r\n          width: \"100%\",\r\n          borderRadius: 0,\r\n          position: \"fixed\",\r\n          zIndex: \"1000\",\r\n        }}\r\n      >\r\n        <Menu pointing secondary style={{ fontSize: \"10px\" }}>\r\n          <Menu.Item\r\n            as={Link}\r\n            to=\"/\"\r\n            name=\"首页\"\r\n            active={activeItem === \"首页\"}\r\n            onClick={this.handleItemClick}\r\n          >\r\n            <Image\r\n              circular\r\n              src={process.env.PUBLIC_URL + \"/favicon/favicon-32x32.png\"}\r\n              onClick={() => (window.location.href = \"/\")}\r\n            />\r\n          </Menu.Item>\r\n          <Menu.Item\r\n            name=\"博文目录\"\r\n            as={Link}\r\n            to=\"/all-posts\"\r\n            active={activeItem === \"博文目录\"}\r\n            onClick={this.handleItemClick}\r\n          >\r\n            博文目录\r\n          </Menu.Item>\r\n\r\n          {/* Archive */}\r\n          <Dropdown item text=\"归档\" scrolling>\r\n            <Dropdown.Menu>\r\n              {(!postsPartitionedByDate && (\r\n                <Dropdown.Item style={{ minHeight: \"50px\" }}>\r\n                  <Loader active size=\"mini\">\r\n                    Loading\r\n                  </Loader>\r\n                </Dropdown.Item>\r\n              )) ||\r\n                (postsPartitionedByDate && (\r\n                  <React.Fragment>\r\n                    {Object.keys(postsPartitionedByDate).map((year) => {\r\n                      let postCount = 0;\r\n                      const monthMenu = (\r\n                        <React.Fragment>\r\n                          {Object.keys(postsPartitionedByDate[year]).map(\r\n                            (month) => {\r\n                              const monthLabel =\r\n                                month < 10 ? \"0\" + month : month;\r\n                              postCount +=\r\n                                postsPartitionedByDate[year][month].length;\r\n                              return (\r\n                                <Dropdown.Item\r\n                                  as={Link}\r\n                                  to={`/posts-${year}-${month}`}\r\n                                  key={month}\r\n                                  style={{ padding: \"0.5em 0\" }}\r\n                                >\r\n                                  {`${monthLabel}月 (${postsPartitionedByDate[year][month].length})`}\r\n                                </Dropdown.Item>\r\n                              );\r\n                            }\r\n                          )}\r\n                        </React.Fragment>\r\n                      );\r\n                      return (\r\n                        <React.Fragment key={year}>\r\n                          <Dropdown.Header>{`${year}年 (${postCount})`}</Dropdown.Header>\r\n                          {monthMenu}\r\n                        </React.Fragment>\r\n                      );\r\n                    })}\r\n                  </React.Fragment>\r\n                ))}\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n\r\n          {/* Tags */}\r\n          <Dropdown item text=\"标签\">\r\n            <Dropdown.Menu>\r\n              {(!postsPartitionedByTags && (\r\n                <Dropdown.Item style={{ minHeight: \"50px\" }}>\r\n                  <Loader active size=\"mini\">\r\n                    Loading\r\n                  </Loader>\r\n                </Dropdown.Item>\r\n              )) ||\r\n                (postsPartitionedByTags && (\r\n                  <React.Fragment>\r\n                    {Object.keys(postsPartitionedByTags).map((tag) => {\r\n                      return (\r\n                        <Dropdown.Item\r\n                          as={Link}\r\n                          to={`/posts-${tagsToEnglish[tag]}`}\r\n                          key={tag}\r\n                          style={{ padding: \"0.5em 0\" }}\r\n                        >\r\n                          {`${tag} (${postsPartitionedByTags[tag].length})`}\r\n                        </Dropdown.Item>\r\n                      );\r\n                    })}\r\n                  </React.Fragment>\r\n                ))}\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n          <Menu.Item style={{ paddingLeft: 0 }}>\r\n            <Input\r\n              placeholder=\"输入关键词...\"\r\n              onChange={(e) => this.setState({ searchValue: e.target.value })}\r\n              style={{ width: \"85px\", height: \"27px\" }}\r\n            >\r\n              <input />\r\n              <Button\r\n                icon={<Icon name=\"search\" size=\"mini\" />}\r\n                onClick={() => this.handleSearchClick()}\r\n              ></Button>\r\n            </Input>\r\n          </Menu.Item>\r\n        </Menu>\r\n      </Segment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavBar;\r\n","import React, { PureComponent } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { PrismLight as SyntaxHighlighter } from \"react-syntax-highlighter\";\r\n//  set the highlight\r\nimport { coy } from \"react-syntax-highlighter/dist/esm/styles/prism\";\r\n//\r\nimport {\r\n  jsx,\r\n  javascript,\r\n  typescript,\r\n  css,\r\n} from \"react-syntax-highlighter/dist/esm/languages/prism\";\r\n\r\nclass CodeBlock extends PureComponent {\r\n  static propTypes = {\r\n    value: PropTypes.string.isRequired,\r\n    language: PropTypes.string,\r\n  };\r\n\r\n  static defaultProps = {\r\n    language: null,\r\n  };\r\n\r\n  componentWillMount() {\r\n    //\r\n    //\r\n    SyntaxHighlighter.registerLanguage(\"jsx\", jsx);\r\n    SyntaxHighlighter.registerLanguage(\"javascript\", javascript);\r\n    SyntaxHighlighter.registerLanguage(\"typescript\", typescript);\r\n    SyntaxHighlighter.registerLanguage(\"css\", css);\r\n  }\r\n\r\n  render() {\r\n    const { language, value } = this.props;\r\n    return (\r\n      <figure className=\"highlight\">\r\n        <SyntaxHighlighter language={language} style={coy}>\r\n          {value}\r\n        </SyntaxHighlighter>\r\n      </figure>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CodeBlock;\r\n","import React, { Component } from \"react\";\r\nimport ReactMarkdown from \"react-markdown/with-html\";\r\nimport { Container } from \"semantic-ui-react\";\r\nimport CodeBlock from \"./CodeBlock\";\r\n\r\nfunction flatten(text, child) {\r\n  return typeof child === \"string\"\r\n    ? text + child\r\n    : React.Children.toArray(child.props.children).reduce(flatten, text);\r\n}\r\n\r\nfunction HeadingRenderer(props) {\r\n  var children = React.Children.toArray(props.children);\r\n  var text = children.reduce(flatten, \"\");\r\n  return React.createElement(\"h\" + props.level, { id: text }, props.children);\r\n}\r\n\r\nclass MarkdownSection extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      lang: props.lang,\r\n      markdownText: null,\r\n      filePath: props.filePath,\r\n    };\r\n  }\r\n\r\n  async loadMarkdown() {\r\n    await fetch(this.state.filePath)\r\n      .then((response) => response.text())\r\n      .then((text) => this.setState({ markdownText: text }));\r\n  }\r\n\r\n  UNSAFE_componentWillMount() {\r\n    this.loadMarkdown();\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Container>\r\n          <ReactMarkdown\r\n            escapeHtml={false}\r\n            source={this.state.markdownText}\r\n            renderers={{ code: CodeBlock, heading: HeadingRenderer }}\r\n          />\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default MarkdownSection;\r\n","import React, { Component } from \"react\";\r\nimport { List, Loader, Header, Label, Pagination } from \"semantic-ui-react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport MediaQuery from \"react-responsive\";\r\nimport tagsToEnglish from \"../data/tagsInEnglish.json\";\r\n\r\nclass ListWithPagination extends Component {\r\n  state = {};\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      title: props.title,\r\n      posts: props.posts,\r\n      itemsPerPage: props.itemsPerPage,\r\n      currentPage: 0,\r\n    };\r\n    this.pages = null;\r\n  }\r\n\r\n  dividePages() {\r\n    this.pages = [];\r\n    const { posts } = this.state;\r\n    const { itemsPerPage } = this.state;\r\n    if (posts) {\r\n      for (let i = 0; i < Math.ceil(posts.length / itemsPerPage); i++) {\r\n        this.pages.push(posts.slice(i * itemsPerPage, (i + 1) * itemsPerPage));\r\n      }\r\n    }\r\n  }\r\n\r\n  handlePageChange = (event, data) => {\r\n    this.setState({ currentPage: data.activePage - 1 });\r\n  };\r\n\r\n  render() {\r\n    const { posts } = this.state;\r\n    if (!this.pages && posts) {\r\n      this.dividePages();\r\n    }\r\n    const { currentPage } = this.state;\r\n    const pages = this.pages;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        {(!posts && <Loader active>Loading</Loader>) ||\r\n          (posts && (\r\n            <React.Fragment>\r\n              <Header as=\"h2\">{this.state.title}</Header>\r\n              <List\r\n                divided\r\n                style={{\r\n                  background: \"none\",\r\n                  width: \"100%\",\r\n                  margin: \"2em 1em 2em 0\",\r\n                }}\r\n              >\r\n                {pages[currentPage].map((post) => {\r\n                  const title = post[\"Title\"][0];\r\n                  const slug = new Buffer(title + post[\"LogDate\"][0]).toString(\r\n                    \"hex\"\r\n                  );\r\n                  return (\r\n                    <List.Item key={post[\"Title\"][0] + post[\"LogDate\"][0]}>\r\n                      <List.Content>\r\n                        <List.Header\r\n                          className=\"post-link\"\r\n                          as={Link}\r\n                          to={`/${slug}`}\r\n                          style={{\r\n                            margin: \"0.5em 0\",\r\n                            paddingTop: \"0.5em\",\r\n                            paddingBottom: \"0.5em\",\r\n                            color: \"black\",\r\n                            fontSize: \"15px\",\r\n                          }}\r\n                        >\r\n                          {post[\"Title\"][0]}\r\n                        </List.Header>\r\n                        <List.Description>\r\n                          {post[\"LogDate\"][0]}\r\n                          {post[\"Tags\"][0].split(\" \").map((tag) => {\r\n                            tag = tag === \"\" ? \"无标签\" : tag;\r\n                            return (\r\n                              <Label\r\n                                as={Link}\r\n                                to={`/posts-${tagsToEnglish[tag]}`}\r\n                                className=\"label-list\"\r\n                                key={tag}\r\n                                size=\"mini\"\r\n                                color={\"blue\"}\r\n                                style={{ marginLeft: \"0.5em\" }}\r\n                              >\r\n                                {tag}\r\n                              </Label>\r\n                            );\r\n                          })}\r\n                        </List.Description>\r\n                      </List.Content>\r\n                    </List.Item>\r\n                  );\r\n                })}\r\n              </List>\r\n\r\n              {posts.length > this.state.itemsPerPage && (\r\n                <React.Fragment>\r\n                  <MediaQuery maxDeviceWidth={1224}>\r\n                    <Pagination\r\n                      className=\"centered-pagination\"\r\n                      ellipsisItem={null}\r\n                      boundaryRange={0}\r\n                      siblingRange={1}\r\n                      defaultActivePage={currentPage + 1}\r\n                      totalPages={Math.ceil(\r\n                        posts.length / this.state.itemsPerPage\r\n                      )}\r\n                      onPageChange={this.handlePageChange}\r\n                    />\r\n                  </MediaQuery>\r\n                  <MediaQuery minDeviceWidth={1224}>\r\n                    <Pagination\r\n                      className=\"centered-pagination\"\r\n                      defaultActivePage={currentPage + 1}\r\n                      totalPages={Math.ceil(\r\n                        posts.length / this.state.itemsPerPage\r\n                      )}\r\n                      onPageChange={this.handlePageChange}\r\n                    />\r\n                  </MediaQuery>\r\n                </React.Fragment>\r\n              )}\r\n            </React.Fragment>\r\n          ))}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ListWithPagination;\r\n","import { Component } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nclass ScrollToTop extends Component {\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.location !== prevProps.location) {\r\n      window.scrollTo(0, 0);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default withRouter(ScrollToTop);\r\n","import React, { Component } from \"react\";\r\nimport App from \"./App\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport MobileApp from \"./MobileApp\";\r\nimport MediaQuery from \"react-responsive\";\r\nimport ScrollToTop from \"./components/scrollToTop\";\r\n\r\nclass WebApp extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <Router basename=\"/the-dixie-project/\">\r\n        <ScrollToTop>\r\n          {/* Mobile devices */}\r\n          <MediaQuery maxDeviceWidth={1224}>\r\n            <MobileApp />\r\n          </MediaQuery>\r\n          {/* Desktop or laptop */}\r\n          <MediaQuery minDeviceWidth={1224}>\r\n            <App />\r\n          </MediaQuery>\r\n        </ScrollToTop>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WebApp;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport WebApp from \"./WebApp\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<WebApp />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}